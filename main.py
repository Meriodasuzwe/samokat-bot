import logging
import pprint

from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler, CallbackQueryHandler
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
TOKEN = "8013831379:AAEBGo8zlxmd6qNWtAcmVnFqx37epY5Tg1U"
ADMIN_ID = 5092137530            # –¢–≤–æ–π Telegram ID
CHANNEL_ID = -1002864245674  # –ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∂–∞–ª–æ–±

# ==== Google Sheets ====
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
gc = gspread.authorize(creds)
sheet = gc.open("Samokat Complaints").sheet1  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–π —Ç–∞–±–ª–∏—Ü—ã

# ==== –≠—Ç–∞–ø—ã FSM ====
MENU, OPERATOR, LOCATION, MEDIA = range(4)
logging.basicConfig(level=logging.INFO)

# ==== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ====
main_menu = ReplyKeyboardMarkup(
    [["üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"], ["‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"]],
    resize_keyboard=True
)

operator_kb = ReplyKeyboardMarkup(
    [["Whoosh", "Yandex", "Jet", "–ù–µ –∑–Ω–∞—é"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

location_kb = ReplyKeyboardMarkup(
    [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

after_report_kb = ReplyKeyboardMarkup(
    [["üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∂–∞–ª–æ–±—É", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
    resize_keyboard=True
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∂–∞–ª–æ–± –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
pending = {}

# ==== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu)
    return MENU

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", reply_markup=operator_kb)
        return OPERATOR

    if text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        user = update.effective_user
        data = sheet.get_all_records()

        # –°—á–∏—Ç–∞–µ–º –∂–∞–ª–æ–±—ã
        count = sum(1 for r in data if r["User"] == user.username or r["User"] == user.first_name)

        # –ó–∞–≥–æ—Ç–æ–≤–∫–∞: –∫–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏–º –æ–ø–ª–∞—Ç—É, –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—à—å
        # reward_per_complaint = 50
        # reward = count * reward_per_complaint

        profile_text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å @{user.username or user.first_name}\n"
            f"–ñ–∞–ª–æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}\n"
            f"–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"  # –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ f"{reward} —Ç–≥"
        )

        await update.message.reply_text(profile_text, reply_markup=main_menu)
        return MENU

    if text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
        await update.message.reply_text(
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø–∞—Ä–∫–æ–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç–æ–≤ –≤ –ê—Å—Ç–∞–Ω–µ.",
            reply_markup=main_menu
        )
        return MENU

    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await start(update, context)

    if text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∂–∞–ª–æ–±—É":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", reply_markup=operator_kb)
        return OPERATOR

    return MENU



async def get_operator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await start(update, context)
    context.user_data["operator"] = update.message.text
    await update.message.reply_text("üìç –£–∫–∞–∂–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=location_kb)
    return LOCATION

async def get_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º –≤–µ—Å—å update, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç
    print("==== RAW UPDATE ====")
    pprint.pprint(update.to_dict())  # –∫—Ä–∞—Å–∏–≤–æ –≤—ã–≤–µ–¥–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–ø–¥–µ–π—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", reply_markup=operator_kb)
        return OPERATOR

    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
    if update.message.location:
        loc = update.message.location
        context.user_data["location"] = f"{loc.latitude}, {loc.longitude}"
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞—Ü–∏–∏
        context.user_data["location"] = update.message.text

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await update.message.reply_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è:")
    return MEDIA



async def get_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    media = update.message.photo[-1].file_id if update.message.photo else update.message.video.file_id
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    username = user.username or user.first_name

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ Google Sheets
    row = [now, username, context.user_data["operator"], context.user_data["location"], media, "–æ–∂–∏–¥–∞–µ—Ç"]
    sheet.append_row(row)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    msg_id = update.message.message_id
    pending[msg_id] = {
        "user_id": user.id,
        "username": username,
        "operator": context.user_data["operator"],
        "location": context.user_data["location"],
        "media": media,
        "media_type": "photo" if update.message.photo else "video"
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{msg_id}")]
    ])
    text = f"–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞ –æ—Ç @{username}\nüõ¥ {context.user_data['operator']} // {context.user_data['location']}"
    await context.bot.send_message(ADMIN_ID, text, reply_markup=kb)
    if update.message.photo:
        await context.bot.send_photo(ADMIN_ID, media)
    else:
        await context.bot.send_video(ADMIN_ID, media)

    await update.message.reply_text(
        "‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=after_report_kb
    )
    return MENU

async def confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if not query.data.startswith("confirm:"):
        return
    msg_id = int(query.data.split(":")[1])
    comp = pending.pop(msg_id, None)
    if not comp:
        await query.edit_message_text("‚ùóÔ∏è –ñ–∞–ª–æ–±–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Google Sheets
    rows = sheet.get_all_values()
    for i, row in enumerate(rows, start=1):
        if row[4] == comp["media"]:
            sheet.update_cell(i, 6, "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
            break

    # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
    caption = f"üö® –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–∞—è –∂–∞–ª–æ–±–∞\nüõ¥ {comp['operator']}\nüìç {comp['location']}\nüë§ @{comp['username']}"
    if comp["media_type"] == "photo":
        await context.bot.send_photo(CHANNEL_ID, comp["media"], caption=caption)
    else:
        await context.bot.send_video(CHANNEL_ID, comp["media"], caption=caption)

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await context.bot.send_message(comp["user_id"], "‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    await query.edit_message_text("‚úÖ –ñ–∞–ª–æ–±–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
    return MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
    return MENU

# ==== –ó–ê–ü–£–°–ö ====
app = ApplicationBuilder().token(TOKEN).build()

conv = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, menu_handler)],
        OPERATOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_operator)],
        LOCATION: [MessageHandler((filters.TEXT | filters.LOCATION) & ~filters.COMMAND, get_location)],
        MEDIA: [MessageHandler(filters.PHOTO | filters.VIDEO, get_media)],
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

app.add_handler(conv)
app.add_handler(CallbackQueryHandler(confirm_handler, pattern="^confirm:"))
print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
app.run_polling()
