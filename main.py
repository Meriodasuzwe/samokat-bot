import logging
import pprint
import os
import json
import sys
from dotenv import load_dotenv
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler, CallbackQueryHandler
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# ==== –õ–û–ì–ò ====
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler("railway.log")
    ]
)
logger = logging.getLogger(__name__)

# ==== –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö ====
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [5092137530, 570326525]  # —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
CHANNEL_ID = "@SamokatControlAstana"

# ==== Google Sheets ====
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = json.loads(os.getenv("GOOGLE_CREDENTIALS"))
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, scope)
gc = gspread.authorize(creds)
sheet = gc.open("Samokat Complaints").sheet1

# ==== –≠—Ç–∞–ø—ã FSM ====
MENU, OPERATOR, LOCATION, MEDIA, DESCRIPTION = range(5)

# ==== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ====
main_menu = ReplyKeyboardMarkup(
    [["üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"], ["‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"]],
    resize_keyboard=True
)

operator_kb = ReplyKeyboardMarkup(
    [["Whoosh", "Yandex", "Jet", "–ù–µ –∑–Ω–∞—é"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

location_kb = ReplyKeyboardMarkup(
    [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

after_report_kb = ReplyKeyboardMarkup(
    [["üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∂–∞–ª–æ–±—É", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
    resize_keyboard=True
)

pending = {}

# ==== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return MENU
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu)
    return MENU

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "/start":
        return await start(update, context)

    text = update.message.text

    if text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", reply_markup=operator_kb)
        return OPERATOR

    if text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        user = update.effective_user
        data = sheet.get_all_records()
        count = sum(1 for r in data if r["User"] == user.username or r["User"] == user.first_name)

        profile_text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å @{user.username or user.first_name}\n"
            f"–ñ–∞–ª–æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}\n"
            f"–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        )

        await update.message.reply_text(profile_text, reply_markup=main_menu)
        return MENU

    if text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
        await update.message.reply_text(
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø–∞—Ä–∫–æ–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç–æ–≤ –≤ –ê—Å—Ç–∞–Ω–µ.",
            reply_markup=main_menu
        )
        return MENU

    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await start(update, context)

    if text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∂–∞–ª–æ–±—É":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", reply_markup=operator_kb)
        return OPERATOR

    return MENU

async def get_operator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await start(update, context)
    context.user_data["operator"] = update.message.text
    await update.message.reply_text("üìç –£–∫–∞–∂–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=location_kb)
    return LOCATION

async def get_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", reply_markup=operator_kb)
        return OPERATOR

    if update.message.location:
        loc = update.message.location
        context.user_data["location"] = f"{loc.latitude}, {loc.longitude}"
    else:
        context.user_data["location"] = update.message.text

    await update.message.reply_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è:")
    return MEDIA

async def get_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        media = update.message.photo[-1].file_id if update.message.photo else update.message.video.file_id
        context.user_data["media"] = media
        context.user_data["media_type"] = "photo" if update.message.photo else "video"

        await update.message.reply_text("‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´—Å–∞–º–æ–∫–∞—Ç –Ω–∞ —Ç—Ä–æ—Ç—É–∞—Ä–µ¬ª):")
        return DESCRIPTION

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã.")
        return MENU

async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    description = update.message.text
    user = update.effective_user
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É (User –æ—Å—Ç–∞—ë—Ç—Å—è, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –≤ –∫–∞–Ω–∞–ª–µ)
    row = [
        now,
        user.username or user.first_name,
        context.user_data["operator"],
        context.user_data["location"],
        context.user_data["media"],
        "–æ–∂–∏–¥–∞–µ—Ç",
        description,
        ""  # Moderator Comment
    ]
    sheet.append_row(row)

    msg_id = update.message.message_id
    pending[msg_id] = {
        "user_id": user.id,
        "operator": context.user_data["operator"],
        "location": context.user_data["location"],
        "media": context.user_data["media"],
        "media_type": context.user_data["media_type"],
        "description": description
    }

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{msg_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{msg_id}")]
    ])
    text = (
        f"–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞\n"
        f"üõ¥ {context.user_data['operator']}\n"
        f"üìç {context.user_data['location']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
    )

    for admin in ADMIN_IDS:
        await context.bot.send_message(admin, text, reply_markup=kb)
        if context.user_data["media_type"] == "photo":
            await context.bot.send_photo(admin, context.user_data["media"])
        else:
            await context.bot.send_video(admin, context.user_data["media"])

    await update.message.reply_text(
        "‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=after_report_kb
    )
    return MENU

async def confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    await query.answer()

    data = query.data.split(":")
    action = data[0]
    msg_id = int(data[1])

    comp = pending.pop(msg_id, None)
    if not comp:
        await query.edit_message_text("‚ùóÔ∏è –ñ–∞–ª–æ–±–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        return

    rows = sheet.get_all_values()

    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å —ç—Ç–∏–º –º–µ–¥–∏–∞
    for i, row in enumerate(rows, start=1):
        if row[4] == comp["media"]:
            if action == "confirm":
                sheet.update_cell(i, 6, "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")  # Status
                caption = (
                    f"üö® –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–∞—è –∂–∞–ª–æ–±–∞\n"
                    f"üõ¥ {comp['operator']}\n"
                    f"üìç {comp['location']}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {comp['description']}"
                )
                if comp["media_type"] == "photo":
                    await context.bot.send_photo(CHANNEL_ID, comp["media"], caption=caption)
                else:
                    await context.bot.send_video(CHANNEL_ID, comp["media"], caption=caption)

                await context.bot.send_message(comp["user_id"], "‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                await query.edit_message_text("‚úÖ –ñ–∞–ª–æ–±–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
            elif action == "reject":
                sheet.update_cell(i, 6, "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")  # Status
                await query.edit_message_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")

                # –ñ–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–ø—Ä–∏—á–∏–Ω–∞)
                context.user_data["reject_row"] = i
                context.user_data["reject_user"] = comp["user_id"]

            break

async def reject_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    if "reject_row" not in context.user_data:
        return

    reason = update.message.text
    row_index = context.user_data.pop("reject_row")
    user_id = context.user_data.pop("reject_user")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –≤ —Ç–∞–±–ª–∏—Ü—É (–∫–æ–ª–æ–Ω–∫–∞ Moderator Comment)
    sheet.update_cell(row_index, 8, reason)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await context.bot.send_message(user_id, f"‚ùå –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")

    await update.message.reply_text("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
    return MENU

# ==== –ó–ê–ü–£–°–ö ====
app = ApplicationBuilder().token(TOKEN).build()

conv = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, menu_handler)],
        OPERATOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_operator)],
        LOCATION: [MessageHandler((filters.TEXT | filters.LOCATION) & ~filters.COMMAND, get_location)],
        MEDIA: [MessageHandler(filters.PHOTO | filters.VIDEO, get_media)],
        DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

app.add_handler(conv)
app.add_handler(CallbackQueryHandler(confirm_handler, pattern="^(confirm|reject):"))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, reject_reason))

if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling(close_loop=False)
